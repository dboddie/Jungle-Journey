; Copyright (C) 2011 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

.org $8000
rom_start:
jmp language_entry
jmp service_entry

; ROM type
.byte $c2       ; 6502 code (2), language ($40), service ($80)

copyright_offset:
.byte [copyright_string - rom_start - 1]

; Version
.byte 1

; Title string
.byte "Jungle Journey (loader)", 0

; Version string
.byte "1.0", 0

copyright_string:
.byte "(C) 2011 David Boddie", 0

; Second processor relocation address
.byte 0, $80, 0, 0

language_entry:

    jmp jungle_code

service_entry:

    cmp #4
    beq service_command

    service_entry_exit:
    rts

rom_name: .byte "JUNGLE", 13

service_command:

    tya                         ; push Y and X registers onto the stack
    pha
    txa
    pha

    ldx #0
    service_command_loop:
    
        lda ($f2),y
        cmp rom_name,x
        bne service_command_exit
        inx
        iny
        cpx #7
        bne service_command_loop
    
    jsr jungle_code
    lda #0
    rts
    
    service_command_exit:
    pla                         ; pop Y and X registers off the stack
    tax
    pla
    tay
    lda #4                      ; restore A
    rts

jungle_code:

    lda #22         ; MODE 5
    jsr $ffee
    lda #5
    jsr $ffee

    lda #23         ; disable flashing cursor
    jsr $ffee
    lda #1
    jsr $ffee
    ldx #7
    cursor_loop:
        lda #0
        jsr $ffee
        dex
        bpl cursor_loop

    jsr set_hidden_palette

    ; Define ENVELOPEs.
    lda #0
    sta $70
    define_envelopes_loop:

        ldx $70
        lda envelopes_high,x
        tay
        lda envelopes_low,x
        tax
        lda #8
        jsr $fff1

        inc $70
        lda $70
        cmp #4
        bne define_envelopes_loop

    jsr copy_title_from_rom

    lda #140
    jsr $fff4   ; *TAPE

    jsr copy_title_down

    ldx #0
    show_input_message_loop:

        lda input_message,x
        jsr $ffee
        inx
        cpx #21
        bne show_input_message_loop

    wait_loop:

        lda #128
        ldx #0
        jsr $fff4
        cpx #0              ; fire button pressed?
        beq wait_no_joystick
        jmp continue

        wait_no_joystick:

        lda #129    ; returns y=255 or 0
        ldx #157    ; SPACE
        ldy #255
        jsr $fff4
        cpy #255
        bne wait_loop

    continue:
    clc

    jsr move_completed_screen_down
    jsr copy_sprites_from_rom
    jsr copy_chars_from_rom
    jsr copy_launch_code

    jmp $1e00

input_message:      .byte 17,3, 31,2,28, "Press SPACE/FIRE"

set_hidden_palette:

    lda #1
    sta $70
    lda #0
    sta $71
    jsr set_palette

    ; Run on into the next routine.

set_core_palette:

    lda #2
    sta $70
    lda #2
    sta $71
    jsr set_palette

    lda #3
    sta $70
    lda #3
    sta $71
    jsr set_palette

    rts

set_palette:
                    ; $70=logical colour
                    ; $71=physical colour
    lda $70
    sta $3dfb
    lda $71
    sta $3dfc
    lda #0
    sta $3dfd
    sta $3dfe
    sta $3dff

    lda #$c         
    ldx #$fb
    ldy #$3d
    jsr $fff1
    rts

envelopes_low:  .byte <explosion_envelope, <damage_envelope, <item_envelope, <key_envelope
envelopes_high: .byte >explosion_envelope, >damage_envelope, >item_envelope, >key_envelope

explosion_envelope: .byte 1,1,252,0,0,10,0,0,126,0,0,130,126,126
damage_envelope:    .byte 2,4,8,0,248,2,0,2,126,0,0,130,126,126
item_envelope:      .byte 3,2,8,4,2,10,10,10,126,0,0,130,126,126
key_envelope:       .byte 4,2,4,40,0,8,1,3,126,0,0,130,126,126

copy_title_from_rom:

    lda #$00
    sta $70
    lda #$84
    sta $71

    lda #$a0
    sta $72
    lda #$5a
    sta $73

    ldx #$17

    copy_title_from_rom_loop1:

        ldy #0
        copy_title_from_rom_loop2:

            lda ($70),y
            sta ($72),y
            iny
            cpy #0
            bne copy_title_from_rom_loop2

        clc
        lda $72
        adc #$40
        sta $72
        lda $73
        adc #$01
        sta $73
        clc

        lda $71
        adc #$01
        sta $71

        dex
        bpl copy_title_from_rom_loop1

    clc
    rts

copy_title_down:

    lda #$a0
    sta $70
    lda #$5a
    sta $71

    lda #$00
    sta $72
    lda #$18
    sta $73

    ldx #$05

    copy_title_down_loop1:

        ldy #0
        copy_title_down_loop2:

            lda ($70),y
            sta ($72),y
            iny
            cpy #0
            bne copy_title_down_loop2

        clc
        lda $70
        adc #$40
        sta $70
        lda $71
        adc #$01
        sta $71
        clc

        lda $73
        adc #$01
        sta $73

        dex
        bpl copy_title_down_loop1

    clc
    rts

move_completed_screen_down:

    lda #$20
    sta $70
    lda #$62
    sta $71

    lda #$00
    sta $72
    lda #$0f
    sta $73

    ldx #128

    move_completed_screen_loop:

        ldy #1
        lda ($70),y
        and #$0f
        asl
        asl
        asl
        asl
        sta $80
        dey
        lda ($70),y
        and #$0f
        ora $80
        sta ($72),y

        lda #0
        sta ($70),y
        iny
        sta ($70),y

        clc
        lda $70
        adc #2
        sta $70
        lda $71
        adc #0
        sta $71
        clc
        
        lda $72
        adc #1
        sta $72
        lda $73
        adc #0
        sta $73
        clc

        dex
        cpx #0
        bne move_completed_screen_next

        ldx #128

        clc
        lda $70
        adc #$40
        sta $70
        lda $71
        adc #$00
        sta $71
        clc

        move_completed_screen_next:
        clc

        lda $72
        cmp #$00
        bne move_completed_screen_loop

        lda $73
        cmp #$18
        bne move_completed_screen_loop

    clc
    rts

copy_sprites_from_rom:

    lda #$80
    sta $70
    lda #$ae
    sta $71

    lda #$00
    sta $72
    lda #$54
    sta $73

    ldx #$35

    copy_sprites_from_rom_loop1:

        ldy #0
        copy_sprites_from_rom_loop2:

            lda ($70),y
            sta ($72),y
            iny
            cpy #16
            bne copy_sprites_from_rom_loop2

        clc
        lda $70
        adc #$10
        sta $70
        lda $71
        adc #$00
        sta $71
        clc

        lda $72
        adc #$10
        sta $72
        lda $73
        adc #$00
        sta $73
        clc

        dex
        bpl copy_sprites_from_rom_loop1

    clc
    rts

copy_chars_from_rom:

    lda #$00
    sta $70
    lda #$9c
    sta $71

    lda #$00
    sta $72
    lda #$3f
    sta $73

    copy_chars_from_rom_loop1:

        ldy #0
        copy_chars_from_rom_loop2:

            lda ($70),y
            sta ($72),y
            iny
            cpy #$80
            bne copy_chars_from_rom_loop2

        clc
        lda $70
        adc #$80
        sta $70
        lda $71
        adc #$00
        sta $71
        clc

        lda $72
        adc #$80
        sta $72
        lda $73
        adc #$00
        sta $73
        clc

        cmp #$51
        bne copy_chars_from_rom_loop1
        lda $72
        cmp #$80
        bne copy_chars_from_rom_loop1

    clc
    rts

launch_code:

    ldx #[start_game - launch_code]
    ldy #$1e
    jsr $fff7

start_game: .byte "*JUNGLECODE", 13, 0

copy_launch_code:       ; copy the launch code to $1e00

    lda #<launch_code
    sta $70
    lda #>launch_code
    sta $71

    lda #$00
    sta $72
    lda #$1e
    sta $73

    ldy #[copy_launch_code - launch_code - 1]

    copy_launch_code_loop:

        lda ($70),y
        sta ($72),y
        dey
        bpl copy_launch_code_loop

    clc
    rts
