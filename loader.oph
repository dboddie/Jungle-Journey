; Copyright (C) 2011 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

.org $5180

init:
    lda #22         ; MODE 5
    jsr $ffee
    lda #5
    jsr $ffee

    lda #23         ; disable flashing cursor
    jsr $ffee
    lda #1
    jsr $ffee
    ldx #7
    cursor_loop:
        lda #0
        jsr $ffee
        dex
        bpl cursor_loop

    jsr set_hidden_palette

    ; Define ENVELOPEs.
    lda #0
    sta $70
    define_envelopes_loop:

        ldx $70
        lda envelopes_high,x
        tay
        lda envelopes_low,x
        tax
        lda #8
        jsr $fff1

        inc $70
        lda $70
        cmp #4
        bne define_envelopes_loop

    ldx #0
    init_load_window_loop:

        lda init_load_window_vdu_bytes,x
        jsr $ffee
        inx
        cpx #5
        bne init_load_window_loop

    lda #255
    ldx #<title_block
    ldy #>title_block
    jsr $ffdd

    jsr copy_title_up

    lda #255
    ldx #<sprites_block
    ldy #>sprites_block
    jsr $ffdd

    lda #255
    ldx #<chars_block
    ldy #>chars_block
    jsr $ffdd

    lda #255
    ldx #<code_block
    ldy #>code_block
    jsr $ffdd

    lda #140
    jsr $fff4   ; *TAPE

    jsr copy_title_down
    jsr move_completed_screen_down

    jmp $1e00

sprites_file_name: .byte "SPRITES", 13
chars_file_name: .byte "CHARS", 13
title_file_name: .byte "TITLE", 13
code_file_name: .byte "CODE", 13

sprites_block: .byte <sprites_file_name, >sprites_file_name
               .byte 0, $54, 0, 0
               .byte 0, $54, 0, 0
               .byte $60, $03, 0, 0
               .byte $60, $57, 0, 0

chars_block: .byte <chars_file_name, >chars_file_name
               .byte $00, $3f, 0, 0
               .byte $00, $3f, 0, 0
               .byte $80, $12, 0, 0
               .byte $80, $51, 0, 0

title_block: .byte <title_file_name, >title_file_name
               .byte $00, $30, 0, 0
               .byte $00, $30, 0, 0
               .byte $00, $15, 0, 0
               .byte $00, $45, 0, 0

code_block: .byte <code_file_name, >code_file_name
               .byte $00, $1e, 0, 0
               .byte $00, $1e, 0, 0
               .byte $30, $20, 0, 0
               .byte $30, $3e, 0, 0

init_load_window_vdu_bytes: .byte 28,0,30,19,27

set_hidden_palette:

    lda #1
    sta $70
    lda #0
    sta $71
    jsr set_palette

    ; Run on into the next routine.

set_core_palette:

    lda #2
    sta $70
    lda #2
    sta $71
    jsr set_palette

    lda #3
    sta $70
    lda #3
    sta $71
    jsr set_palette

    rts

set_palette:
                    ; $70=logical colour
                    ; $71=physical colour
    lda $70
    sta $3dfb
    lda $71
    sta $3dfc
    lda #0
    sta $3dfd
    sta $3dfe
    sta $3dff

    lda #$c         
    ldx #$fb
    ldy #$3d
    jsr $fff1
    rts

envelopes_low:  .byte <explosion_envelope, <damage_envelope, <item_envelope, <key_envelope
envelopes_high: .byte >explosion_envelope, >damage_envelope, >item_envelope, >key_envelope

explosion_envelope: .byte 1,1,252,0,0,10,0,0,126,0,0,130,126,126
damage_envelope:    .byte 2,4,8,0,248,2,0,2,126,0,0,130,126,126
item_envelope:      .byte 3,2,8,4,2,10,10,10,126,0,0,130,126,126
key_envelope:       .byte 4,2,4,40,0,8,1,3,126,0,0,130,126,126

copy_title_up:

    lda #$00
    sta $70
    lda #$30
    sta $71

    lda #$a0
    sta $72
    lda #$5a
    sta $73

    ldx #$17

    copy_title_up_loop1:

        ldy #0
        copy_title_up_loop2:

            lda ($70),y
            sta ($72),y
            iny
            cpy #0
            bne copy_title_up_loop2

        clc
        lda $72
        adc #$40
        sta $72
        lda $73
        adc #$01
        sta $73
        clc

        lda $71
        adc #$01
        sta $71

        dex
        bpl copy_title_up_loop1

    clc
    rts

copy_title_down:

    lda #$a0
    sta $70
    lda #$5a
    sta $71

    lda #$00
    sta $72
    lda #$18
    sta $73

    ldx #$05

    copy_title_down_loop1:

        ldy #0
        copy_title_down_loop2:

            lda ($70),y
            sta ($72),y
            iny
            cpy #0
            bne copy_title_down_loop2

        clc
        lda $70
        adc #$40
        sta $70
        lda $71
        adc #$01
        sta $71
        clc

        lda $73
        adc #$01
        sta $73

        dex
        bpl copy_title_down_loop1

    clc
    rts

move_completed_screen_down:

    lda #$20
    sta $70
    lda #$62
    sta $71

    lda #$00
    sta $72
    lda #$0f
    sta $73

    ldx #128

    move_completed_screen_loop:

        ldy #1
        lda ($70),y
        and #$0f
        asl
        asl
        asl
        asl
        sta $80
        dey
        lda ($70),y
        and #$0f
        ora $80
        sta ($72),y

        lda #0
        sta ($70),y
        iny
        sta ($70),y

        clc
        lda $70
        adc #2
        sta $70
        lda $71
        adc #0
        sta $71
        clc
        
        lda $72
        adc #1
        sta $72
        lda $73
        adc #0
        sta $73
        clc

        dex
        cpx #0
        bne move_completed_screen_next

        ldx #128

        clc
        lda $70
        adc #$40
        sta $70
        lda $71
        adc #$00
        sta $71
        clc

        move_completed_screen_next:
        clc

        lda $72
        cmp #$00
        bne move_completed_screen_loop

        lda $73
        cmp #$18
        bne move_completed_screen_loop

    clc
    rts
